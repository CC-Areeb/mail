THESE NOTES ARE FOR ME AND FOR THOSE WHO WANT TO LEARN IT BUT IN CHUNKS RATHER THAN IN 1 BIG PIECE


We can use laravel gates so that we can authorize a user and check if they has the correct credentials to 
perform a specific task

Inside the AuthServiceProvider we need the boot method where any coding done on this method will call the 
auth facade 

Before using the boot method and gate, we need a new page to see if use is admin or not, this is done by 
making a new public function in your controller and returning a view from there to the web.php. 

After this we go back to the AuthServiceProvider and in the boot method we define a gate using this syntax
" Gate::define(); ". Inside the define method we need to provide some parameters. 

First parameter is the key and this has to be a string that tells us what we want to do. We want to see if 
the admin is set or not and only the admin can access that private page we made in the views folder, the 
second parameter is the closure so we define a function in it.

Gate::define('admin-only', function ($user)
        {
            if($user->IsAdmin == 1)
            {
                
            }
        });

the $user is the object we want to check. Since we have defined a boolean in database for the IsAdmin column
so in this if statement we will check through 1 and 0. 1 being yes and 0 being no.

The new function we defined in the controller will be used to set gates and check for user's status as admin or
not. 
if(Gate::allows('admin-only', auth()->user()))
        {
            return view('private');
        }
        
        else
        {
            abort(403);
        }

the Gate::allows() takes in 2 parameters, first is the gate name i.e admin-only and next will be the gate methods
in this case we can use the allows method so that we can check to see if user is admin or not. If the user is admin
then the allow method will let that user access the private page of admins otherwise there will be an abort method
stating the error and stoping the user.

Alternatively we can use the denies method to stop users from entering the private admin's page by reversing the
condition used in the if-else code blocks.

In short the allows method will allow the entery of a user if they pass the gate check and the denies will stop the
user if they pass the gate check.

We can use ENUM for multiple rolls such as admin, moderators, users and more. The gates can be used as a check for
all the multiple roles and can save us from using a lot of if-else statements.



Mailing:
Laravel has a default mailing functionality called switf-mailer and many other mailing systems can be built on top
of switf-mailer

To send mails we need to user a mail-driver and laravel has 8 mail drivers in the mail.php file inside the config 
folder. For this we will use the mailable

We can generate a mailing template using the artisan command in your CLI. The command for making a mail is 
php artisan make:mail <flag-name>, we have to write a flag of the -m or --markdown[=MARKDOWN].

Sample mail template: 
php artisan make:mail SampleMail -m  -----------> -m is a markdown flag
php artisan make:mail SampleMail -m emails.sample -------> the emails is a folder and sample is the file name

when you make a mail, you will get a folder of Mail in the app folder and a file by the name you choose during
the command. Open that php file and you can see that it uses 2 traits called Queueable and SerializeModels

Queueable is so that we can queue all the incomming mails in a line and the SerializeModels is used to 
serialize the eloquent models correctly

NOTE:
To serialize data means to convert a value to a sequence of bits, so that it can be stored in a file, a memory buffer,
or transmitted across a network.

in this mail file there is an empty constructor and a build method. Inside the build method we define a view
to return. Syntax below:

return $this->markdown('view.name');

We can also show more things like subject and title to the users

php artisan make:mail SampleMail -m emails.sample, with this we get a new folder by the name emails and an mail 
blade file inside this folder.

We can do all those things we do with a normal blade file like condional statemetns and all the blade directives.

To send actual mail from this, we need to make sure that we have a mailing provider or a local develoment. We will 
use mailing provider called mail trap.

Set the .env file data given by mailtrap (different for everyone) and inside the web.php we need to make sure to 
use the Mail facade and write the mail code as shown -----> Mail::to('sample@example.com')->send(new WelcomeMail());
the WelcomeMail is a mailable 

NOTE: make sure you copy the correct details of mailtrap for the .env file


Setting up our mailing system to the log file:
Inside the env file we can change the MAIL_MAILER=smtp to MAIL_MAILER=log and when we send the mail, we will get 
the mail inside the log file