THESE NOTES ARE FOR ME AND FOR THOSE WHO WANT TO LEARN IT BUT IN CHUNKS RATHER THAN IN 1 BIG PIECE



"GATES":

We can use laravel gates so that we can authorize a user and check if they has the correct credentials to 
perform a specific task

Inside the AuthServiceProvider we need the boot method where any coding done on this method will call the 
auth facade 

Before using the boot method and gate, we need a new page to see if use is admin or not, this is done by 
making a new public function in your controller and returning a view from there to the web.php. 

After this we go back to the AuthServiceProvider and in the boot method we define a gate using this syntax
" Gate::define()". Inside the define method we need to provide some parameters. 

First parameter is the key and this has to be a string that tells us what we want to do. We want to see if 
the admin is set or not and only the admin can access that private page we made in the views folder, the 
second parameter is the closure so we define a function in it.

Gate::define('admin-only', function ($user)
        {
            if($user->IsAdmin == 1)
            {
                
            }
        });

the $user is the object we want to check. Since we have defined a boolean in database for the IsAdmin column
so in this if statement we will check through 1 and 0. 1 being yes and 0 being no.

The new function we defined in the controller will be used to set gates and check for user's status as admin or
not. 
if(Gate::allows('admin-only', auth()->user()))
        {
            return view('private');
        }
        
        else
        {
            abort(403);
        }

the Gate::allows() takes in 2 parameters, first is the gate name i.e admin-only and next will be the gate methods
in this case we can use the allows method so that we can check to see if user is admin or not. If the user is admin
then the allow method will let that user access the private page of admins otherwise there will be an abort method
stating the error and stoping the user.

Alternatively we can use the denies method to stop users from entering the private admin's page by reversing the
condition used in the if-else code blocks.

In short the allows method will allow the entery of a user if they pass the gate check and the denies will stop the
user if they pass the gate check.

We can use ENUM for multiple rolls such as admin, moderators, users and more. The gates can be used as a check for
all the multiple roles and can save us from using a lot of if-else statements.


"Mailing:"

Laravel has a default mailing functionality called switf-mailer and many other mailing systems can be built on top
of switf-mailer

To send mails we need to user a mail-driver and laravel has 8 mail drivers in the mail.php file inside the config 
folder. For this we will use the mailable

We can generate a mailing template using the artisan command in your CLI. The command for making a mail is 
php artisan make:mail <flag-name>, we have to write a flag of the -m or --markdown[=MARKDOWN].

Sample mail template: 
php artisan make:mail SampleMail -m  -----------> -m is a markdown flag
php artisan make:mail SampleMail -m emails.sample -------> the emails is a folder and sample is the file name

when you make a mail, you will get a folder of Mail in the app folder and a file by the name you choose during
the command. Open that php file and you can see that it uses 2 traits called Queueable and SerializeModels

Queueable is so that we can queue all the incomming mails in a line and the SerializeModels is used to 
serialize the eloquent models correctly

NOTE:
To serialize data means to convert a value to a sequence of bits, so that it can be stored in a file, a memory buffer,
or transmitted across a network.

in this mail file there is an empty constructor and a build method. Inside the build method we define a view
to return. Syntax below:

return $this->markdown('view.name');

We can also show more things like subject and title to the users

php artisan make:mail SampleMail -m emails.sample, with this we get a new folder by the name emails and an mail 
blade file inside this folder.

We can do all those things we do with a normal blade file like condional statemetns and all the blade directives.

To send actual mail from this, we need to make sure that we have a mailing provider or a local develoment. We will 
use mailing provider called mail trap.

Set the .env file data given by mailtrap (different for everyone) and inside the web.php we need to make sure to 
use the Mail facade and write the mail code as shown -----> Mail::to('sample@example.com')->send(new WelcomeMail());
the WelcomeMail is a mailable 

NOTE: make sure you copy the correct details of mailtrap for the .env file


Setting up our mailing system to the log file:
Inside the env file we can change the MAIL_MAILER=smtp to MAIL_MAILER=log and when we send the mail, we will get 
the mail inside the log file.


"How to insert any type of attachments in email in laravel:"

Always a good idea to have a controller which will handle all the details about your emails and attachments.


First we need to define the route with the controller that is handling the web.php. Then go inside that controller
and inside the function we have to pull in the use "App\Mail\Your_mail_blade_file" and "Illuminate\Support\Facades\Mail"
these 2 use statments so that they will allow us to use our own mailing markdown template we have made by using the CLI.


Next we need to define the "Mail::to('someone@example.com')->send(new AttachmentMail())" inside the controller so that we 
can sent our mail by using the "to()" method. After this we go in our app-->mail-->You_mail_template_name.php and inside
the build method, below the markdown we have to return the mail with some methods as shown below:

return $this->markdown('your_folder_name.your_file_name')
            ->subject('your subject')
            ->attach(public_path('/images/your_file_name.jpg'));

the subject is the same as we use when we are sending mail from gmail or hotmail.

the attach is used so that we can send files such as images or pdfs, this method takes in 2 parameters
first is the mandatory parameter of the path of the file so in the above case we use the method called 
"public_path()" which is the public folder name and inside this we give the path of folder that the attachment is in
so in this case "/images/your_file_name.jpg"


We can also pass in another optional array as the second argument and this can have few keys and values
such as we can change the name of the file or define the mime type of the file.


"

public function build()
    {
        return $this->markdown('emails.attachment')
                    ->subject('How to attach images')
                    ->attach(public_path('/images/fantasy.jpg'), [
                        'as' => 'nature.jpg',
                        'mime' => 'application/jpg',
                    ]);
    }
    
"
(The double quotes "" are just for emphises when I am writing these notes for myself).

"public function build()
{
    $email = $this->view('emails.employment_mailview')->subject('Employment Application');

    // $attachments is an array with file paths of attachments
    foreach($attachments as $filePath){
        $email->attach($filePath);
    }
    return $email;
}"

we can also send multiple attachments and this is one of many ways to do it 

NOTE:
What is MIME type?
A MIME type (or media type) is an identifier for file formats or format contents on the Internet.
MIME stands for Multipurpose Internet Mail Extensions and all MIME types are officially maintained by the
Internet Assigned Numbers Authority (IANA).



"NOTIFICATION:"

Notification is very important when builing a web application. Take an example of a notification system that
will notify users that an app is going under maintainance so the company sends 1 notification about the 
maintainance to all its users so we can say we have a 1 to many link between notification and users.


To make a notification class, we can do it by performing the command "php artisan make:notification name_of_your_notification".
It is same as how we created the email. The Notifications folder will be created inside the app folder and inside that a php
file which is our notification file name.


This notification file has a constructor, a "via($notifiable)" function with a parameter, a "toMail($notifiable)" with the same
parameter as the "via()" method and "toArray($notifiable)" method.


The constructor takes in the relavent information that we want to send through notification.

The "via()" method has a notifiable as a parameter which will defines which notification channels we will use.

The "toMail()" method is an indivisual method that is used for every notification channel that allows us to specifically
define how to send one of these notifications.

We have different way of defining migration table for a notification. use the command below
"php artisan notification:table"


Inside the "toMail()" method we can either define static messages or we can give our own names as a single word or a camelcase
word so that in the controller we can use those as keys and pass values and all this is done inside the array as shown below:


notification.php:
"


    private $enrollmentData;

    /**
     * Create a new notification instance.
     *
     * @return void
     */
    public function __construct($enrollmentData)
    {
        $this->enrollmentData = $enrollmentData;
    }

/**
    * Get the mail representation of the notification.
    *
    * @param  mixed  $notifiable
    * @return \Illuminate\Notifications\Messages\MailMessage
    */
    public function toMail($notifiable)
    {
        return (new MailMessage)
                    ->line($this->enrollmentData['body'])
                    ->action($this->enrollmentData['enrollmentText  '], $this->enrollmentData['url'])
                    ->line($this->enrollmentData['Thanks']);
    }
"

controller:
"
public function sendTestNotification()
    {
        $enrollmentData = [
            'body' => 'You received a notification',
            'enrollmentTextenrollmentText' => '',
            'url' => '',
            'Thanks' => '',
        ];
    }
"

As you can see we are using the constructor to send notifications to users by passing a variable inside the constructor
and that constructor variable is being used inside the "toMail()" method to store keys like body, enrollmentText, url and Thanks


We can use 2 ways to send notifications to the users, first is by using a trait called notifiable to an eloquent class and send 
notification to all users.

The other way us by using notification facade and make sure to pull the correct use statement "use Illuminate\Support\Facades\Notification".

Now we will use the "Notification::send()" method to send notification to the users as shown below:
"Notification::send($user, new Your_Notification_Class($a_variable_in_the_constructor))"




"SMS NOTIFICATION:"

In default laravel there is no way to send sms notifications but there is a package called "Nexmo". Link to nexmo is given below:
"https://developer.vonage.com/"

Nexmo is an API based application that connects your app directly with any carrier around the world. There are more things you can 
do with Nexmo like automatic facebook notifications, voice messages, verified transactions or implement a tool factory authentication.

Once you make the account on then go to your .env file and add the VONAGE_KEY and VONAGE_SECRET and use the values that are given to you.

Now we make a controller and a new end-point(https://url/end-point)
this new end point will send us the sms notification whenever it is hit or accessed.